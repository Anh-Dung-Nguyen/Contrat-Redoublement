usethis::use_testthat(3)
5
nombre <- 3
source("~/Documents/INSA/3A/Etude pratique/R/TP1/test.r")
a <- 200
b <- 33
if (b > a) {
print("b is greater than a")
} else if (a == b) {
print("a and b are equal")
} else {
print("a is greater than b")
}
source("~/Documents/INSA/3A/Etude pratique/R/TP1/test.r")
source("~/Documents/INSA/3A/Etude pratique/R/TP1/test.r")
Outer_func <- function(x) {
Inner_func <- function(y) {
a <- x + y
return(a)
}
return (Inner_func)
}
output <- Outer_func(3) # To call the Outer_func
output(5)
View(Outer_func)
View(Outer_func)
View(Outer_func)
View(Outer_func)
thismatrix <- matrix(c(1,2,3,4,5,6), nrow = 3, ncol = 2)
thismatrix <- matrix(c(1,2,3,4,5,6), nrow = 3, ncol = 2)
View(thismatrix)
thismatrix[2,]
thismatrix[c(1,2),]
thismatrix <- thismatrix[-c(1), -c(1)]
thismatrix
thismatrix <- matrix(c(1,2,3,4,5,6), nrow = 3, ncol = 2)
thismatrix <- thismatrix[-c(1), -c(1)]
dim(thismatrix)
thismatrix
thismatrix <- matrix(c(1,2,3,4,5,6), nrow = 3, ncol = 2)
dim(thismatrix)
thismatrix
dim(thismatrix)
Matrix1 <- matrix(c("apple", "banana", "cherry", "grape"), nrow = 2, ncol = 2)
Matrix2 <- matrix(c("orange", "mango", "pineapple", "watermelon"), nrow = 2, ncol = 2)
# Adding it as a rows
Matrix_Combined <- rbind(Matrix1, Matrix2)
Matrix_Combined
View(Matrix_Combined)
View(Matrix1)
View(Matrix2)
# Adding it as a columns
Matrix_Combined <- cbind(Matrix1, Matrix2)
Matrix_Combined
thisarray <- c(1:24)
thisarray
multiarray <- array(thisarray, dim = c(4, 3, 2))
multiarray
multiarray[2, 3, 2]
use_test_helper()
foofy<-function(x,y){
z<-x*y
return(z)
}
View(foofy)
usethis::use_r()
usethis::use_test()
usethis::use_r()
usethis::use_test()
warnings()
install.packages("here")
install.packages("here")
install.packages("devtools")
devtools::install_cran("MASS")
install.packages("devtools")
devtools::install_cran("MASS")
devtools::install_github("r-lib/devtools")
install.packages("testthat")
install.packages("devtools")
pak::pak("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::load_all()
test_that("Test_Foofy_fonction", {
expect_equal(foofy(3,5), 15)
})
test_that("Test_Foofy_fonction", {
expect_equal(foofy(3,5), 16)
})
test_that("Test_Foofy_fonction", {
expect_equal(foofy(3,5), 16)
})
test_that("Test_Foofy_fonction", {
expect_equal(foofy(3,5), 16)
})
Depending on where you are in the development cycle, you’ll run your tests at various scales. When you are rapidly iterating on a function, you might work at the level of individual tests. As the code settles down, you’ll run entire test files and eventually the entire test suite.
test_that("Test_Foofy_fonction", {
expect_equal(foofy(3,5), 16)
})
devtools::load_all()
test_that("Test_Foofy_fonction", {
expect_equal(foofy(3,5), 16)
})
source("~/Documents/INSA/3A/Etude pratique/Contrat Redoublement/learningTestthat/R/foofy.R")
test_that("Test_Foofy_fonction", {
expect_equal(foofy(3,5), 16)
})
test_that("Test_Foofy_fonction", {
expect_equal(foofy(3,5), 16)
})
test_that("Test_Foofy_fonction", {
expect_equal(foofy(3,5), 16)
})
devtools::load_all()
rm(list = c("foofy"))
devtools::load_all()
test_that("Test_Foofy_fonction", {
expect_equal(foofy(3,5), 16)
})
test_that("Test_Foofy_fonction", {
expect_equal(foofy(3,5), 15)
})
devtools::load_all()
testthat::test_file("tests/testthat/test-foofy.R")
devtools::load_all()
testthat::test_file("tests/testthat/test-foofy.R")
use_test()
usethis::use_test()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test()
devtools::test()
devtools::check()
str_dup("a",3)
library(stringr)
str_dup("a",3)
str_dup("a",3)
str_dup("a",3)
devtools::load_all()
use_test("test-dup.r")
use_this::use_test("test-dup.r")
usethis::use_test("test-dup.r")
rlang::last_trace()
usethis::use_test("test-dup.R")
library(stringr)
library(stringr)
devtools::load_all()
library(stringr)
test_that("basic duplication works", {
expect_equal(str_dup("a", 3), "aaa")
expect_equal(str_dup("abc", 2), "abcabc")
expect_equal(str_dup(c("a", "b"), 2), c("aa", "bb"))
expect_equal(str_dup(c("a", "b"), c(2, 3)), c("aa", "bbb"))
})
test_that("0 duplicates equals empty string", {
expect_equal(str_dup("a", 0), "")
expect_equal(str_dup(c("a", "b"), 0), rep("", 2))
})
test_that("uses tidyverse recycling rules", {
expect_error(str_dup(1:2, 1:3), class = "vctrs_error_incompatible_size")
})
devtools::load_all()
devtools::test()
expect_error(str_duq(1:2, 1:3))
test_that("Testing_Errors"){
test_that("Testing_Errors",{
expect_error(str_duq(1:2, 1:3))
}
